# consensus/interfaces.py
from typing import Protocol, Iterable, Optional, Any
from swarm.models.object import Object

class TopologyRouter(Protocol):
    """Pure routing: knows neighbors/next hops for a given topology."""
    def should_forward(self) -> bool: ...

class ConsensusTransport(Protocol):
    def send(self, dest: int, payload: object) -> None: ...
    def broadcast(self, payload: object) -> None: ...

class ConsensusHost(Protocol):
    # domain introspection
    def get_object(self, object_id: str) -> Optional[Object]: ...
    def is_agreement_achieved(self, object_id: str) -> bool: ...
    def calculate_quorum(self) -> int: ...

    # side effects
    def on_leader_elected(self, obj: Object, proposal_id: str) -> None: ...
    def on_participant_commit(self, obj: Object, leader_id: int, proposal_id: str) -> None: ...

    # utility
    def now(self) -> float: ...
    def log_debug(self, msg: str) -> None: ...
    def log_info(self, msg: str) -> None: ...
    def log_warn(self, msg: str) -> None: ...
