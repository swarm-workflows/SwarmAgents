# consensus/interfaces.py
from typing import Protocol, Iterable, Optional
from swarm.models.job import Job

class ConsensusTransport(Protocol):
    def send(self, dest_agent_id: int, payload: object) -> None: ...
    def broadcast(self, payload: object, include_self: bool = False,
                  excluded_peers: list[int] = None, src: int = None, fwd: int = None) -> None: ...

class ConsensusHost(Protocol):
    # domain introspection
    def get_object(self, object_id: str) -> Optional[Job]: ...
    def has_object_action_completed(self, object_id: str) -> bool: ...
    def calculate_quorum(self) -> int: ...

    # side effects
    def on_leader_elected(self, job: Job, proposal_id: str) -> None: ...
    def on_participant_commit(self, job: Job, leader_id: int, proposal_id: str) -> None: ...

    # utility
    def now(self) -> float: ...
    def log_debug(self, msg: str) -> None: ...
    def log_info(self, msg: str) -> None: ...
    def log_warn(self, msg: str) -> None: ...
